func isBalanced(s string) bool {
	stack := make([]rune, 0)

	for _, c := range s {
		switch c {
		case '(', '{', '[':
			stack = append(stack, c)
		case ')':
			if len(stack) > 0 && stack[len(stack)-1] == '(' {
				stack = stack[:len(stack)-1]
			} else {
				return false
			}
		case '}':
			if len(stack) > 0 && stack[len(stack)-1] == '{' {
				stack = stack[:len(stack)-1]
			} else {
				return false
			}
		case ']':
			if len(stack) > 0 && stack[len(stack)-1] == '[' {
				stack = stack[:len(stack)-1]
			} else {
				return false
			}
		}
	}

	return len(stack) == 0
}

func main() {
	s1 := "{()}{}()"
	if isBalanced(s1) {
		fmt.Println("Скобки сбалансированы")
	} else {
		fmt.Println("Скобки несбалансированы")
	}

	s2 := "{()}(])"
	if isBalanced(s2) {
		fmt.Println("Скобки сбалансированы")
	} else {
		fmt.Println("Скобки несбалансированы")
	}
}

// 2 type of solution
// Функция для проверки, является ли строка со скобками сбалансированной
func isBalanced(s string) bool {
	stack := []rune{}
	for _, char := range s {
		if char == '(' || char == '{' || char == '[' {
			stack = append(stack, char)
		} else {
			if len(stack) == 0 {
				return false
			}

			lastOpen := stack[len(stack)-1]

			if (char == ')' && lastOpen == '(') ||
				(char == '}' && lastOpen == '{') ||
				(char == ']' && lastOpen == '[') {
				stack = stack[:len(stack)-1]
			} else {
				return false
			}
		}
	}
	return len(stack) == 0
}

func main() {
	// Вводим строку со скобками
	input := "{()}{}()"

	if isBalanced(input) {
		fmt.Println("Скобки сбалансированы")
	} else {
		fmt.Println("Скобки несбалансированы")
	}
}
